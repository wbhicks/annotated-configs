;
;
;
;
;

		    ;
(setq enable-local-variables 'query)

		    ;
		    ;
		    ;
		    ;
(require 'cl-19 "cl")

(setq load-path (cons "~/.emacs_lisp" load-path))
(require 'my-buff-menu)

;

;
;


;
;


;
;

;
;

;

;
;
;
;
;
;
;
;
;
;

;
;
 
;
;


;
;
;
;
;


;
;
;
;
;


;
;


(defface hi-cyan
  '((t (:foreground "cyan")))
  "Face for hi-lock mode."
  :group 'hi-lock-faces)
 
(defface hi-cyan-b
  '((t (:weight bold :foreground "cyan")))
  "Face for hi-lock mode."
  :group 'hi-lock-faces)
 
(defface hi-magenta
  '((t (:foreground "magenta")))
  "Face for hi-lock mode."
  :group 'hi-lock-faces)
 
(defface hi-magenta-b
  '((t (:weight bold :foreground "magenta")))
  "Face for hi-lock mode."
  :group 'hi-lock-faces)
 
(defface hi-red
  '((t (:foreground "red")))
  "Face for hi-lock mode."
  :group 'hi-lock-faces)
 
(defface hi-yellow-b
  '((t (:weight bold :foreground "yellow")))
  "Face for hi-lock mode."
  :group 'hi-lock-faces)
 
(defface hi-grey
  '((t (:foreground "white")))
  "Face for hi-lock mode."
  :group 'hi-lock-faces)

(defface hi-blue-on-grey
  '((t (:background "white" :foreground "blue")))
  "Face for hi-lock mode."
  :group 'hi-lock-faces)

(defface hi-black-on-mustard
  '((t (:background "yellow" :foreground "black")))
  "Face for hi-lock mode."
  :group 'hi-lock-faces)

                    ;
(defface hi-bold
  '((t (:weight bold)))
  "Face for hi-lock mode."
  :group 'hi-lock-faces)


;
;


;

		    ;
		    ;
		    ;

                    ;
;
;
;
;
;
;
;
;
;
;
;
;
;

(if (equal (getenv "DISP_COLOR_PREF") "console")
    (defface post-quoted-text-face 
      '((t (:foreground "yellow")))
      "See my .emacs."
      :group 'post-faces)
  (defface post-quoted-text-face 
    '((t (:foreground "blue")))
    "See my .emacs."
    :group 'post-faces))

(if (equal (getenv "DISP_COLOR_PREF") "console")
    (defface post-double-quoted-text-face 
      '((t (:foreground "cyan")))
      "See my .emacs."
      :group 'post-faces)
  (defface post-double-quoted-text-face 
    '((t (:inherit post-quoted-text-face :weight bold)))
    "See my .emacs."
    :group 'post-faces))

(if (equal (getenv "DISP_COLOR_PREF") "console")
    (defface post-multiply-quoted-text-face 
      '((t (:foreground "yellow")))
      "See my .emacs."
      :group 'post-faces)
  (defface post-multiply-quoted-text-face 
    '((t (:foreground "cyan")))
    "See my .emacs."
    :group 'post-faces))

(defface post-header-keyword-face
  '((t (:foreground "red" :weight bold)))
  "See my .emacs."
  :group 'post-faces)

(if (equal (getenv "DISP_COLOR_PREF") "console")
    (defface font-lock-comment-face
      '((t (:foreground "cyan")))
      "See my .emacs."
      :group 'font-lock-highlighting-faces)
  (defface font-lock-comment-face
    '((t (:foreground "blue")))
    "See my .emacs."
    :group 'font-lock-highlighting-faces))

;
;
;
;


;
;
;
;
;


;
;
;
;
;


(custom-set-variables
  ;
  ;
 '(blink-cursor nil)
 '(blink-cursor-interval 2.0)
 '(global-font-lock-mode t nil (font-lock))
 '(post-kill-quoted-sig nil)
 '(post-uses-fill-mode nil))
(custom-set-faces
  ;
  ;
 '(default ((t (:stipple nil :background "unspecified-bg" :foreground "cyan" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 1 :width normal :family "default"))))
 '(Info-title-1-face ((((type tty pc) (class color)) (:foreground "yellow"))))
 '(Info-title-2-face ((((type tty pc) (class color)) (:foreground "blue"))))
 '(cursor ((t (:foreground "blue"))))
 '(custom-documentation-face ((t (:inverse-video nil))))
 '(custom-group-tag-face ((t (:foreground "blue" :weight bold :height 1.2))))
 '(custom-variable-tag-face ((t (:inherit variable-pitch :foreground "red1" :weight bold :height 1.2))))
 '(font-lock-builtin-face ((((type tty) (class color)) (:foreground "blue" :underline t :weight bold))))
 '(font-lock-constant-face ((((type tty) (class color)) (:foreground "magenta"))))
 '(font-lock-doc-face ((t (:inherit font-lock-string-face :background "white"))))
 '(font-lock-function-name-face ((((type tty) (class color)) (:foreground "red" :underline t :weight bold))))
 '(font-lock-string-face ((((type tty) (class color)) (:foreground "red"))))
 '(font-lock-type-face ((((type tty) (class color)) (:background "red" :underline t))))
 '(font-lock-variable-name-face ((((type tty) (class color)) (:foreground "red" :underline t :weight bold))))
 '(font-lock-warning-face ((((type tty) (class color)) (:background "black" :foreground "red"))))
 '(hi-blue ((((background dark)) (:foreground "blue"))))
 '(hi-green ((((background dark)) (:foreground "green"))))
 '(hi-yellow ((((background dark)) (:foreground "yellow"))))
 '(info-node ((t (:foreground "black"))))
 '(info-xref ((t (:foreground "red" :weight bold))))
 '(mode-line ((t (:weight bold))))
 '(region ((((type tty) (class color)) (:foreground "yellow"))))
 '(show-paren-match-face ((((class color)) (:foreground "red" :weight bold))))
 '(show-paren-mismatch-face ((((class color)) (:background "white" :foreground "magenta" :underline t :weight bold))))
 '(vhdl-font-lock-attribute-face ((((class color) (background dark)) (:background "black" :foreground "white"))))
 '(vhdl-font-lock-directive-face ((((class color) (background dark)) (:background "black" :foreground "Aquamarine"))))
 '(vhdl-font-lock-enumvalue-face ((((class color) (background dark)) (:background "black" :foreground "BurlyWood"))))
 '(vhdl-font-lock-function-face ((((class color) (background dark)) (:background "black" :foreground "Orchid1")))))


;
;
;
;
;


;
;
;
;
;


;
;


;
		    ;
		    ;
		    ;
		    ;
		    ;
		    ;
		    ;
                    ;
(if (equal (getenv "DISP_COLOR_PREF") "console")
    (setq next-screen-context-lines 12)
  (setq next-screen-context-lines 21))

                    ;
(menu-bar-mode 0)

		    ;
(setq column-number-mode t)

		    ;
(global-set-key "\M-[h" 'beginning-of-line)
(global-set-key "\M-[F" 'end-of-line)

		    ;
		    ;
		    ;
		    ;
		    ;
(global-set-key [right] 'forward-word)
(global-set-key [left] 'backward-word)
		    ;
		    ;
		    ;

		    ;
(global-set-key "]" 'forward-char)
(global-set-key "[" 'backward-char)

		    ;
;
;
;
;
		    ;
		    ;
		    ;


;
;


(hi-lock-mode 1)
		    ;
		    ;

		    ;
		    ;
(setq hi-lock-face-history
  (list "hi-blue" "hi-blue-b" "hi-yellow" "hi-yellow-b" "hi-cyan" "hi-cyan-b" 
	"hi-red" "hi-red-b" "hi-black-b" "hi-blue-on-grey" "hi-black-on-mustard" 
	"hi-green" "hi-green-b" "hi-magenta" "hi-magenta-b" "hi-grey" "hi-pink"
	"hi-black-hb"))


;
;


;
;
;

(setq key-translation-map (or key-translation-map (make-keymap)))
(define-key key-translation-map "\C-x?" "\C-h")
(define-key key-translation-map "\C-h" (kbd "DEL"))
 
;
;
;
;
;
;
;
;

		    ;
		    ;
		    ;
(global-set-key "\C-_" (lambda () 
			 (interactive)
			 (undo)
			 (message "C-/ is undo")))

(defun my-kill-word (arg)
  "Like kill-word, but kills trailing space or hyphen if it did not already kill a leading
one. More precisely, if called when point is not on a space or hyphen then it kills the
character following the word. Meant to keep one space between words."
  (interactive "p")
  (let ((began-with (char-to-string (char-after))))
    (kill-region (point)
		 (progn (forward-word arg) 
			(or (equal " " began-with)
			    (equal "-" began-with)
			    (forward-char))
			(point)))))

(global-set-key "\M-d" 'my-kill-word)


;
;
;
;
;


;
;
;
;
;


;
;


		    ;
		    ;
		    ;
		    ;
		    ;
(autoload 'html-helper-mode "html-helper-mode" "Yay HTML" t)
(setq auto-mode-alist (cons '("\\.html$" . html-helper-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.htm$" . html-helper-mode) auto-mode-alist))

(require 'post)

		    ;
		    ;
(setq default-major-mode 'text-mode)


;
;


		    ;
		    ;

;
;
;
;
;

		    ;
(setq-default fill-column 90)
		    ;
		    ;
 
		    ;
		    ;
		    ;
		    ;
		    ;
		    ;
		    ;
		    ;
(add-hook 'text-mode-hook
	  '(lambda ()
	     (define-key text-mode-map "\M-s"
	       'fill-region)))


;
;


		    ;

(setq abbrev-file-name "~/.emacs_abbrevs")
(quietly-read-abbrev-file)

		    ;
;
		    ;
(add-hook 'post-mode-hook '(lambda () (abbrev-mode 1)))

;

;
;
;

;
;
;
;
;
;
;
;
;
;
;
;

		    ;
(defconst hi-lock-file-name
  (if (eq system-type 'vax-vms)
      "~/hilock.def"
    (convert-standard-filename "~/.emacs_hi-lock_regexps"))
  "*Default name of file from which to read regexps for hi-lock.")

(defun my-abbrev-name (arg)
  (let (name start end)
    (save-excursion
      (forward-word (1+ (- arg)))
      (setq end (point))
      (backward-word 1)
      (setq start (point)
            name (buffer-substring-no-properties start end)))
    (downcase name)))


(add-hook 'post-mode-hook '(lambda () (my-load-hilight-list)))

(defun my-load-hilight-list ()
  (interactive)
  (setq my-hilight-list nil)
  (load hi-lock-file-name)
  (let ((the-list my-hilight-list))
    (while the-list
      (highlight-regexp (car the-list) 'hi-bold)
      (setq the-list (cdr the-list)))))

(defun starts-with (word prefix)
  (string= prefix (substring word 0 (length prefix))))

(defun my-modest-abbrev-and-highlight (arg)
  (interactive "p")   
		    ;
  (let ((the-abbrev (my-abbrev-name arg)))
		    ;
		    ;
    (inverse-add-abbrev
     (if only-global-abbrevs
	 global-abbrev-table
       (or local-abbrev-table
	   (error "No per-mode abbrev table")))
     "Mode" arg)
		    ;
		    ;
    (if (starts-with (abbrev-expansion the-abbrev post-mode-abbrev-table) the-abbrev)
	(progn
	  (highlight-regexp the-abbrev 'hi-bold)
	  (setq my-hilight-list (cons the-abbrev my-hilight-list))))))

(defun my-save-hilight-list ()
  (interactive)
  (save-excursion
    (set-buffer (get-buffer-create " write-hilight-abbrev-file"))
    (erase-buffer)
    (let ((the-list my-hilight-list)
	  (the-buffer (get-buffer " write-hilight-abbrev-file")))
      (princ "(setq my-hilight-list '(" the-buffer)
      (while the-list
	(princ "\"" the-buffer)
	(princ (car the-list) the-buffer)
	(princ "\" " the-buffer)
	(setq the-list (cdr the-list)))
      (princ "))" the-buffer))
    (write-region 1 (point-max) hi-lock-file-name)
;
))

(defun my-save-some-buffers (&optional arg pred)
  (interactive "P")
  (if (or arg
	  (y-or-n-p (format "Save hi-lock abbrev patterns in %s? " hi-lock-file-name)))
      (my-save-hilight-list))
  (save-some-buffers arg pred))

(defun my-save-buffers-kill-emacs (&optional arg)
  (interactive "P")
  (if (or arg
	  (y-or-n-p (format "Save hi-lock abbrev patterns in %s? " hi-lock-file-name)))
      (my-save-hilight-list))
  (save-buffers-kill-emacs arg))


(global-set-key "\C-xail" 'my-modest-abbrev-and-highlight)
(global-set-key "\C-xs" 'my-save-some-buffers)
(global-set-key [?\C-x ?\C-c] 'my-save-buffers-kill-emacs)


;




;
;
;
;
;


;
;
;
;
;

;

		    ;
		    ;
(setq-default indent-tabs-mode nil)

		    ;
		    ;
		    ;
		    ;
		    ;
		    ;
		    ;
		    ;
		    ;
		    ;
(setq inferior-lisp-program "clisp -I")

		    ;
(setq truncate-partial-width-windows nil)

		    ;
(add-hook 'lisp-mode-hook '(lambda () (setq comment-column 20)))
(add-hook 'emacs-lisp-mode-hook '(lambda () (setq comment-column 20)))

		    ;
		    ;
		    ;
		    ;


;
;


(add-hook 'lisp-mode-hook '(lambda () (auto-fill-mode 1)))
(add-hook 'emacs-lisp-mode-hook '(lambda () (auto-fill-mode 1)))

		    ;
(add-hook 'lisp-mode-hook '(lambda () (transient-mark-mode 1)))
(add-hook 'emacs-lisp-mode-hook '(lambda () (transient-mark-mode 1)))


;
;


;
;
;

                    ;
(add-hook 'lisp-mode-hook '(lambda () (highlight-regexp "[)(]" 'hi-grey)))
(add-hook 'emacs-lisp-mode-hook '(lambda () (highlight-regexp "[)(]" 'hi-grey)))

;
;
;
;
;
;
;
;
;
;
;
;
;
;

(require 'paren)
(show-paren-mode 1)

;


;
;


;
;

(add-hook 'lisp-mode-hook '(lambda () (hs-minor-mode 1)))
(add-hook 'emacs-lisp-mode-hook '(lambda () (hs-minor-mode 1)))

;
(defvar my-hs-hide nil "Current state of hideshow for toggling all.")
;
(defun my-toggle-hideshow-all () "Toggle hideshow all."
  (interactive)
  (setq my-hs-hide (not my-hs-hide))
  (if my-hs-hide 
      (hs-hide-all)
    (hs-show-all)))

;
;

(global-set-key "\C-cc" 'hs-toggle-hiding)
;
(global-set-key "\C-cC" 'my-toggle-hideshow-all)


;
;


		    ;
		    ;
		    ;
		    ;
		    ;
		    ;
		    ;

(defvar my-side-window-standard -1 
  "Used in my-side-window-toggle and -adjust. Column width to which the minor window 
should return when being un-collapsed.")
		    ;

(defvar my-side-window-collapsed 10
  "Used in my-side-window-toggle and -adjust. Column width of the minor window when 
it is collapsed.")

(defun my-side-window-adjust (arg)
  "Invoke repeatedly from the minor window until its width is about right. 
My-side-window-toggle will then make the minor window jump between that width 
and a narrow, collapsed state."
  (interactive "p")
  (if (> (window-width) 19)
      (shrink-window-horizontally 10)
    (enlarge-window-horizontally 58)) ;
  (setq my-side-window-standard (window-width)))

(defun my-side-window-toggle (arg)
  "Can be invoked from either the major or minor window. Makes the minor window 
jump between its standard width (set with my-side-window-adjust) and 
a narrow, collapsed state. If my-side-window-adjust was never called, then we
do not know which window is meant to be the minor one, and we will assume this
window is it. You can always set a window to be the minor one by invoking 
my-side-window-adjust from within it."
  (interactive "p")
  (if (= my-side-window-standard -1) ;
      (setq my-side-window-standard (window-width)))
  (if (and (/= (window-width) my-side-window-standard)
	   (/= (window-width) my-side-window-collapsed))
      (other-window 1)) ;
  (my-side-window-toggle-aux arg))

(defun my-side-window-toggle-aux (arg) ;
  (interactive "p")
  (if (= (window-width) my-side-window-standard)
      (progn (shrink-window-horizontally (- my-side-window-standard my-side-window-collapsed))
             (other-window 1))
		    ;
    (enlarge-window-horizontally (- my-side-window-standard (window-width)))))

(global-set-key [?\C-x left] 'my-side-window-adjust)
(global-set-key [?\C-x right] 'my-side-window-toggle)


;
;


(defun my-lisp-eval-defun (&optional and-go) 
  "Highlight the name of the current defun throughout the buffer,
then send the current defun to the inferior Lisp process.
Prefix argument means switch to the Lisp buffer afterwards."
  (interactive "P")
                    ;
                    ;
  (save-excursion
    (end-of-defun)
    (skip-chars-backward " \t\n\r\f") ;
    (beginning-of-defun)
    (forward-word 1) ;
    (forward-sexp)  ;
    (setq end (point))
    (backward-sexp) ;
    (highlight-regexp (regexp-quote (buffer-substring-no-properties (point) end)) 'hi-bold))
                    ;
  (lisp-eval-defun and-go))

(defun my-eval-defun (&optional edebug-it) 
  "Highlight the name of the current defun throughout the buffer,
then call eval-defun."
  (interactive "P")
                    ;
		    ;
  (save-excursion
    (end-of-defun)
    (beginning-of-defun)
    (forward-word 1) ;
    (forward-sexp)  ;
    (setq end (point))
    (backward-sexp) ;
    (highlight-regexp (regexp-quote (buffer-substring-no-properties (point) end)) 'hi-bold))
                    ;
  (eval-defun edebug-it))

(add-hook 'lisp-mode-hook
          '(lambda ()
             (define-key lisp-mode-map "\M-\C-x"
               'my-lisp-eval-defun)))

(add-hook 'emacs-lisp-mode-hook
          '(lambda ()
             (define-key emacs-lisp-mode-map "\M-\C-x"
               'my-eval-defun)))


;
;
;
;
;


;
;
;

;
;
;
;
;
;
;
;
;
;
;

(defun my-dired-find-alternate-file-updir ()
  "My hack to improve upon dired-up-directory."
  (interactive)
  (set-buffer-modified-p nil)
  (find-alternate-file ".."))

(add-hook 'dired-load-hook
	  '(lambda ()
	     (define-key dired-mode-map [right]
	       'dired-find-alternate-file)
	     (define-key dired-mode-map [left]
	       'my-dired-find-alternate-file-updir)
	     (define-key dired-mode-map "?"
	       'my-dired-summary)
	     (setq dired-listing-switches "-alFX")))

;
(defun my-dired-summary ()
  "Like dired-summary but reminds me of my bindings too."
  (interactive)
  (dired-why)
  ;
  ;
  (message "> < skip non-dirs   find-dired   g_et  C-u s_witches   m_ark  u_nmark   * BANG unmark all\n+ mkdir  RIGHT go   i_nsert ls   ! shellcmd (no * or   * c_hange char   PCT m rgx on name\nRET go in new buf   M-$ fold     ? implies ? at end)   d_el   x_punge   PCT g content rgx"))

(add-hook 'dired-load-hook
	  (lambda ()
	    (load "dired-x")
	    ;
	    ;
	    ;
	    ))

(add-hook 'dired-mode-hook
	  (lambda ()
	    ;
	    ;
	    ;
	    ))

;
;

;
;
;

		    ;
		    ;
		    ;
(desktop-load-default)
(desktop-read)
